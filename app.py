import streamlit as st
import requests
from datetime import datetime, timedelta
from streamlit_cookies_controller import CookieController
import pandas as pd

API_URL_REGISTER = "http://localhost:8000/api/v1/user/register"
API_URL_TOKEN = "http://localhost:8000/api/v1/user/token"
API_URL_LOGIN = "http://localhost:8000/api/v1/user/login"
API_URL_USERS = "http://localhost:8000/api/v1/user/get_all_except_self"
API_URL_BATTLE_RECORDS = "http://localhost:8000/api/v1/battle_records/"
API_URL_AGGR_BATTLE_RECORDS = "http://localhost:8000/api/v1/battle_records/aggregated"
API_URL_LIST_DUMPS = "http://localhost:8000/api/v1/admin/dumps"
API_URL_CREATE_DUMP = "http://localhost:8000/api/v1/admin/dump"
API_URL_RESTORE_DUMP = "http://localhost:8000/api/v1/admin/restore"


controller = CookieController()


def register_user(email: str, password: str, tag: str):
    user_data = {"email": email, "password": password, "tag": tag}
    response = requests.post(API_URL_REGISTER, json=user_data)
    return response


def get_token(username: str, password: str):
    response = requests.post(
        API_URL_TOKEN, data={"username": username, "password": password}
    )
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return None


def check_authorization(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(API_URL_LOGIN, headers=headers)
    if response.status_code == 200:
        user_data = response.json()
        return user_data
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return None


def get_all_users(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."):
        response = requests.get(API_URL_USERS, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return []


def get_user_subscriptions(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(
        "http://localhost:8000/api/v1/subscriptions/", headers=headers
    )
    if response.status_code == 200:
        return response.json()
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")
        return []


def subscribe_user(token, other_user_id):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(
        f"http://localhost:8000/api/v1/subscriptions/subscribe/{other_user_id}",
        headers=headers,
    )
    if response.status_code != 201:
        st.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
    st.rerun()


def unsubscribe_user(token, other_user_id):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(
        f"http://localhost:8000/api/v1/subscriptions/unsubscribe/{other_user_id}",
        headers=headers,
    )
    if response.status_code != 200:
        st.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        )
    st.rerun()


def registration_page():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    tag = st.text_input("–¢–µ–≥")

    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if email and password and tag:
            response = register_user(email, password, tag)
            if response.status_code == 201:
                st.success(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞."
                )
                st.session_state.registration_success = True
            else:
                st.error(
                    f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")


def login_page():
    st.title("–í—Ö–æ–¥")

    username = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        if username and password:
            token = get_token(username, password)
            if token:
                st.success(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

                controller.set("jwt_token", token)

                st.session_state.token = token
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")


def logout():
    controller.remove("jwt_token")
    st.session_state.token = None
    st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    st.rerun()


def home_page():
    token = controller.get("jwt_token")

    if token:
        user_data = check_authorization(token)
        if user_data:
            st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            st.write(f"–í—ã –≤ –∞–∫–∫–∞—É–Ω—Ç–µ, {user_data['name']}! üòÑ")
            st.write(f"**–¢–µ–≥:** {user_data['tag']} üèÜ")

            if st.button("–í—ã—Ö–æ–¥"):
                logout()
        else:
            st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")


def users_page():
    st.title("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

    token = controller.get("jwt_token")
    if token:
        if check_authorization(token):
            users = get_all_users(token)
            subscriptions = get_user_subscriptions(token)
            subscribed_user_ids = set(sub["user_id2"] for sub in subscriptions)
            if users:
                show_subscriptions = st.checkbox("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

                if show_subscriptions:
                    subscribed_users = [
                        user for user in users if user["id"] in subscribed_user_ids
                    ]
                    if subscribed_users:
                        for user in subscribed_users:
                            user_id = user["id"]
                            st.write(f"**–ò–º—è:** {user['name']} üéÆ")
                            st.write(f"**–¢–µ–∫—É—â–∏–µ —Ç—Ä–æ—Ñ–µ–∏:** {user['crowns']} üèÜ")
                            st.write(
                                f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ—Ñ–µ–µ–≤:** {user['max_crowns']} üèÜ"
                            )
                            key = f"button_{user_id}"

                            if st.button(
                                "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                                key=key,
                                help="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            ):
                                unsubscribe_user(token, user_id)
                                st.toast(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {user['name']}", icon="‚úÖ")
                            st.write("---")
                    else:
                        st.write("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                else:
                    for user in users:
                        user_id = user["id"]
                        st.write(f"**–ò–º—è:** {user['name']} üéÆ")
                        st.write(f"**–¢–µ–∫—É—â–∏–µ —Ç—Ä–æ—Ñ–µ–∏:** {user['crowns']} üèÜ")
                        st.write(
                            f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ—Ñ–µ–µ–≤:** {user['max_crowns']} üèÜ"
                        )
                        key = f"button_{user_id}"
                        if user_id in subscribed_user_ids:
                            if st.button(
                                "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
                                key=key,
                                help="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            ):
                                unsubscribe_user(token, user_id)
                                st.toast(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {user['name']}", icon="‚úÖ")
                        else:
                            if st.button(
                                "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
                                key=key,
                                help="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            ):
                                subscribe_user(token, user_id)
                                st.toast(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {user['name']}", icon="‚úÖ")
                        st.write("---")
            else:
                st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


def battle_records_page():
    st.title("–ú–æ–∏ –ø–æ–µ–¥–∏–Ω–∫–∏")

    token = controller.get("jwt_token")
    if token:
        if check_authorization(token):
            try:
                headers = {"Authorization": f"Bearer {token}"}
                response = requests.get(API_URL_BATTLE_RECORDS, headers=headers)
                if response.status_code == 200:
                    battle_records = response.json()
                    if battle_records:
                        for record in battle_records:
                            st.write(f"**–°–æ–ø–µ—Ä–Ω–∏–∫:** {record['name2']} üéÆ")
                            st.write(
                                f"**–¢–≤–æ–π —Å—á–µ—Ç:** {record['user1_score']} | **–°—á–µ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:** {record['user2_score']} üéÆ"
                            )
                            st.write(
                                f"**–¢–≤–æ–∏ –∫–æ—Ä–æ–Ω—ã:** {record['user1_get_crowns']} | **–ö–æ—Ä–æ–Ω—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:** {record['user2_get_crowns']} üèÜ"
                            )
                            if record["is_user1_win"]:
                                st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–±–µ–¥–∞! üòÑ")
                            else:
                                st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ—Ä–∞–∂–µ–Ω–∏–µ üò¢")
                            st.write("---")
                    else:
                        st.write("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–µ–¥–∏–Ω–∫–æ–≤.")
                else:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–µ–¥–∏–Ω–∫–æ–≤.")
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        else:
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–µ–¥–∏–Ω–∫–æ–≤.")


def battle_statistics_page():
    st.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∏—Ö –±–æ–µ–≤")

    token = controller.get("jwt_token")
    if token:
        user_data = check_authorization(token)
        if user_data:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–µ–≤..."):
                headers = {"Authorization": f"Bearer {token}"}
                response = requests.get(API_URL_AGGR_BATTLE_RECORDS, headers=headers)
                if response.status_code == 200:
                    aggr_battle_records = response.json()
                    if aggr_battle_records:
                        df = pd.DataFrame(aggr_battle_records)

                        total_wins = df["score1"].sum()
                        total_losses = df["score2"].sum()
                        total_battles = total_wins + total_losses
                        win_percentage = (
                            (total_wins / total_battles) * 100
                            if total_battles > 0
                            else 0
                        )

                        st.write(f"**–í—Å–µ–≥–æ –±–æ–µ–≤:** {total_battles}")
                        st.write(f"**–ü–æ–±–µ–¥:** {total_wins} ({win_percentage:.2f}%)")
                        st.write(
                            f"**–ü–æ—Ä–∞–∂–µ–Ω–∏–π:** {total_losses} ({100 - win_percentage:.2f}%)"
                        )

                        st.subheader("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º")
                        st.dataframe(df[["name1", "name2", "score1", "score2"]])

                        st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ–±–µ–¥ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π")
                        win_loss_df = pd.DataFrame(
                            {
                                "–†–µ–∑—É–ª—å—Ç–∞—Ç": ["–ü–æ–±–µ–¥—ã", "–ü–æ—Ä–∞–∂–µ–Ω–∏—è"],
                                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": [total_wins, total_losses],
                            }
                        )
                        st.bar_chart(win_loss_df.set_index("–†–µ–∑—É–ª—å—Ç–∞—Ç"))

                    else:
                        st.write("–£ –≤–∞—Å –Ω–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–æ—è–º.")
                else:
                    st.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–µ–≤: {response.status_code}"
                    )
        else:
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ–µ–≤.")


def admin_page():
    st.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")

    token = controller.get("jwt_token")
    if token:
        user_data = check_authorization(token)
        if user_data and user_data.get("is_super_user", False):
            st.write("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")

            try:
                response = requests.post(
                    API_URL_LIST_DUMPS, headers={"Authorization": f"Bearer {token}"}
                )
                response.raise_for_status()
                dumps = response.json().get("dumps", [])
            except requests.exceptions.HTTPError as errh:
                st.error(f"HTTP Error: {errh}")
                dumps = []
            except requests.exceptions.ConnectionError as errc:
                st.error(f"Error Connecting: {errc}")
                dumps = []
            except requests.exceptions.Timeout as errt:
                st.error(f"Timeout Error: {errt}")
                dumps = []
            except requests.exceptions.RequestException as err:
                st.error(f"Error: {err}")
                dumps = []

            st.subheader("–°–ø–∏—Å–æ–∫ –¥–∞–º–ø–æ–≤")
            if dumps:
                for dump in dumps:
                    st.write(f"–î–∞–º–ø: {dump}")
                    if st.button(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ {dump}", key=f"restore_{dump}"):
                        with st.spinner(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ {dump}..."):
                            try:
                                restore_response = requests.post(
                                    API_URL_RESTORE_DUMP,
                                    json={"filename": dump},
                                    headers={"Authorization": f"Bearer {token}"},
                                )
                                restore_response.raise_for_status()
                                st.success(
                                    restore_response.json().get(
                                        "message", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
                                    )
                                )
                            except requests.exceptions.HTTPError as errh:
                                st.error(f"HTTP –û—à–∏–±–∫–∞: {errh}")
                            except requests.exceptions.RequestException as err:
                                st.error(f"–û—à–∏–±–∫–∞: {err}")
            else:
                st.write("–î–∞–º–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

            st.subheader("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∞–º–ø")
            if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–∞–º–ø"):
                with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∞–º–ø–∞..."):
                    try:
                        create_response = requests.post(
                            API_URL_CREATE_DUMP,
                            headers={"Authorization": f"Bearer {token}"},
                        )
                        create_response.raise_for_status()
                        st.success(
                            create_response.json().get(
                                "message", "–î–∞–º–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ."
                            )
                        )
                    except requests.exceptions.HTTPError as errh:
                        st.error(f"HTTP –û—à–∏–±–∫–∞: {errh}")
                    except requests.exceptions.RequestException as err:
                        st.error(f"–û—à–∏–±–∫–∞: {err}")
        else:
            st.write("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    else:
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")


def main():
    if "registration_success" not in st.session_state:
        st.session_state.registration_success = False

    if "token" not in st.session_state:
        st.session_state.token = None

    pages = {
        "–ü—Ä–æ—Ñ–∏–ª—å": home_page,
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": registration_page,
        "–í—Ö–æ–¥": login_page,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": users_page,
        "–ú–æ–∏ –ø–æ–µ–¥–∏–Ω–∫–∏": battle_records_page,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤": battle_statistics_page,
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": admin_page,
    }

    page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É",
        options=[
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "–í—Ö–æ–¥",
            "–ü—Ä–æ—Ñ–∏–ª—å",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "–ú–æ–∏ –ø–æ–µ–¥–∏–Ω–∫–∏",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        ],
    )

    pages[page]()


if __name__ == "__main__":
    main()
