import streamlit as st
import requests
from datetime import datetime, timedelta
from streamlit_cookies_controller import CookieController

# URL –≤–∞—à–µ–≥–æ API
API_URL_REGISTER = "http://localhost:8000/api/v1/user/register"
API_URL_TOKEN = "http://localhost:8000/api/v1/user/token"
API_URL_LOGIN = "http://localhost:8000/api/v1/user/login"  # –ù–æ–≤—ã–π URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
API_URL_USERS = "http://localhost:8000/api/v1/user/get_all_except_self"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CookieController
controller = CookieController()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(email: str, password: str, name: str, tag: str):
    user_data = {
        "email": email,
        "password": password,
        "name": name,
        "tag": tag
    }
    response = requests.post(API_URL_REGISTER, json=user_data)
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def get_token(username: str, password: str):
    response = requests.post(API_URL_TOKEN, data={"username": username, "password": password})
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ä—É—á–∫—É /login
def check_authorization(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(API_URL_LOGIN, headers=headers)
    return response.status_code == 200

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...'):
        response = requests.get(API_URL_USERS, headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return []
    
def get_user_subscriptions(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get("http://localhost:8000/api/v1/subscriptions/", headers=headers)
    if response.status_code == 200:
        return response.json()
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")
        return []
    
def subscribe_user(token, other_user_id):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(f"http://localhost:8000/api/v1/subscriptions/subscribe/{other_user_id}", headers=headers)
    if response.status_code != 201:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    st.rerun()

def unsubscribe_user(token, other_user_id):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(f"http://localhost:8000/api/v1/subscriptions/unsubscribe/{other_user_id}", headers=headers)
    if response.status_code != 200:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    st.rerun()

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def registration_page():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

    email = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
    name = st.text_input("–ò–º—è")
    tag = st.text_input("–¢–µ–≥")

    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if email and password and name and tag:
            response = register_user(email, password, name, tag)
            if response.status_code == 201:
                st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞.")
                st.session_state.registration_success = True
            else:
                st.error(f"–û—à–∏–±–∫–∞: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
def login_page():
    st.title("–í—Ö–æ–¥")

    username = st.text_input("Email")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")

    if st.button("–í–æ–π—Ç–∏"):
        if username and password:
            token = get_token(username, password)
            if token:
                st.success(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
                controller.set('jwt_token', token)

                st.session_state.token = token
            else:
                st.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        else:
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")

# –õ–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def logout():
    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies –∏ —Å–µ—Å—Å–∏–∏
    controller.remove('jwt_token')
    st.session_state.token = None
    st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!")
    st.rerun()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def home_page():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ cookies
    token = controller.get('jwt_token')

    if token:
        if check_authorization(token):
            st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            st.write("–í—ã –≤ –∞–∫–∫–∞—É–Ω—Ç–µ!")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            if st.button("–í—ã—Ö–æ–¥"):
                logout()
        else:
            st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.title("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")  # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

def users_page():
    st.title("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

    token = controller.get('jwt_token')
    if token:
        if check_authorization(token):
            users = get_all_users(token)
            subscriptions = get_user_subscriptions(token)
            subscribed_user_ids = set(sub['user_id2'] for sub in subscriptions)
            if users:
                # Add a checkbox to filter subscriptions
                show_subscriptions = st.checkbox("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")

                if show_subscriptions:
                    # Filter users to show only those you are subscribed to
                    subscribed_users = [user for user in users if user['id'] in subscribed_user_ids]
                    if subscribed_users:
                        for user in subscribed_users:
                            user_id = user['id']
                            st.write(f"**–ò–º—è:** {user['name']} üéÆ")
                            st.write(f"**–¢–µ–∫—É—â–∏–µ —Ç—Ä–æ—Ñ–µ–∏:** {user['crowns']} üèÜ")
                            st.write(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ—Ñ–µ–µ–≤:** {user['max_crowns']} üèÜ")
                            key = f"button_{user_id}"
                            # Since we're showing subscribed users, show "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è" button
                            if st.button("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", key=key, help="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                                unsubscribe_user(token, user_id)
                                st.toast(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {user['name']}", icon='‚úÖ')
                            st.write("---")
                    else:
                        st.write("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
                else:
                    # Show all users
                    for user in users:
                        user_id = user['id']
                        st.write(f"**–ò–º—è:** {user['name']} üéÆ")
                        st.write(f"**–¢–µ–∫—É—â–∏–µ —Ç—Ä–æ—Ñ–µ–∏:** {user['crowns']} üèÜ")
                        st.write(f"**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ—Ñ–µ–µ–≤:** {user['max_crowns']} üèÜ")
                        key = f"button_{user_id}"
                        if user_id in subscribed_user_ids:
                            if st.button("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", key=key, help="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                                unsubscribe_user(token, user_id)
                                st.toast(f"–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {user['name']}", icon='‚úÖ')
                        else:
                            if st.button("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", key=key, help="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
                                subscribe_user(token, user_id)
                                st.toast(f"–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {user['name']}", icon='‚úÖ')
                        st.write("---")
            else:
                st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            st.write("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        st.write("–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    if "registration_success" not in st.session_state:
        st.session_state.registration_success = False

    if "token" not in st.session_state:
        st.session_state.token = None

    pages = {
        "–ì–ª–∞–≤–Ω–∞—è": home_page,
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è": registration_page,
        "–õ–æ–≥–∏–Ω": login_page,
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": users_page,
    }

    # –ü–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", options=["–ì–ª–∞–≤–Ω–∞—è", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–õ–æ–≥–∏–Ω", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    pages[page]()

if __name__ == "__main__":
    main()
